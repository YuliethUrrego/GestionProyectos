@page "/usuarios"

@using GestionProyectos.Shared.Entities;
@using CurrieTechnologies.Razor.SweetAlert2;
@using GestionProyectos.Client.Services;

@inject SweetAlertService Swal;
@inject IModalService modal;
@inject IUsuario usuarioService;

<h3>Usuarios</h3>
<div class="menu-opciones">
    <a class="btn btn-warning mb-3 mr-3 btn-aceptar espaciar" @onclick="abrirModalProyecto">Asignar Usuario a Proyecto</a>
    <a class="btn btn-warning mb-3 mr-3 btn-aceptar espaciar" @onclick="abrirModalRoles">Crear Rol</a>
    <a class="btn btn-warning mb-3 mr-3 btn-aceptar espaciar" @onclick="abrirModalCrear">Crear Usuario</a>
</div>
<table class="table">
    <thead>
        <tr>
            <th>Nombre</th>
            <th>Email</th>
            <th>Tipo Identificación</th>
            <th>Nro Identificación</th>
            @* <th>Rol</th>
            <th>Proyectos</th> *@

            <th></th>
        </tr>
    </thead>
    <tbody>
        @if (listaUsuario == null)
        {
            <tr>
                <td colspan="3" align="center">
                    <img style="width:50px src="https://media.tenor.com/On7kvXhzmlAAAAj/loading-gif.gif" />
                </td>
            </tr>
        }
        else
        {
            @foreach (var item in listaUsuario)
            {
                <tr>
                    <td>@(item.PersonaE.Nombre ?? "NA")</td>
                    <td>@item.PersonaE.Email</td>
                    <td>@item.PersonaE.TipoIdentificacion</td>
                    <td>@item.PersonaE.Cedula</td>
                    @* <td>@item.PersonaE.</td> *@
                </tr>
            }
        }
    </tbody>
</table>

@code {
    List<UsuarioE>? listaUsuario = null;

    protected override async Task OnInitializedAsync()
    {
        listaUsuario = await usuarioService.Lista();
    }

    private async Task abrirModalCrear()
    {
        var opciones = new ModalOptions()
            {
                DisableBackgroundCancel = true,
                HideCloseButton= true,
            };
        var form = modal.Show<Usuario>("Crear Usuario", opciones);
        var result = await form.Result;

    }

    private async Task abrirModalRoles()
    {
        var opciones = new ModalOptions()
            {
                DisableBackgroundCancel = true,
                HideCloseButton = true,
            };
        var form = modal.Show<UsuarioRol>("Crear Roles", opciones);
        var result = await form.Result;

    }

    private async Task abrirModalProyecto()
    {
        var opciones = new ModalOptions()
            {
                DisableBackgroundCancel = true,
                HideCloseButton = true,
            };
        var form = modal.Show<UsuarioProyecto>("Asignar Usuario a Proyecto", opciones);
        var result = await form.Result;

    }
}
